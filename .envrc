# Define the Docker container name
export CONTAINER_NAME="$(basename $PWD)"
export USER_UID=$(id -u $(whoami))
export USER_GID=$(id -g $(whoami))
export USER_NAME="$(echo "$CONTAINER_NAME-docker" | tr -cd '[:alnum:]_-')"
DOCKER_FILE=dev.Dockerfile

# Directory path
DOCKER_DIR=${PWD}/.docker
USER_HIST_FILE_DIR="$DOCKER_DIR/history/user"
ROOT_HIST_FILE_DIR="$DOCKER_DIR/history/root"
# File paths
USER_HIST_FILE="$USER_HIST_FILE_DIR/histfile"
ROOT_HIST_FILE="$ROOT_HIST_FILE_DIR/histfile"

# Check if .docker directory exists, create it if it doesn't
if [ ! -d "$DOCKER_DIR" ]; then
    echo "Creating directory: $DOCKER_DIR"
    mkdir -p "$DOCKER_DIR"
    # Set appropriate permissions (only owner can access)
    chmod 700 "$DOCKER_DIR"
fi

if [ ! -d "$USER_HIST_FILE_DIR" ]; then
    echo "Creating directory: $USER_HIST_FILE_DIR"
    mkdir -p "$USER_HIST_FILE_DIR"
    # Set appropriate permissions (only owner can access)
    chmod 700 "$USER_HIST_FILE_DIR"
fi

if [ ! -d "$ROOT_HIST_FILE_DIR" ]; then
    echo "Creating directory: $ROOT_HIST_FILE_DIR"
    mkdir -p "$ROOT_HIST_FILE_DIR"
    # Set appropriate permissions (only owner can access)
    chmod 700 "$ROOT_HIST_FILE_DIR"
fi

# Check if histfile exists, create it if it doesn't
if [ ! -f "$USER_HIST_FILE" ]; then
    echo "Creating file: $USER_HIST_FILE"
    touch "$USER_HIST_FILE"
    # Set appropriate permissions (only owner can read/write)
    chmod 600 "$USER_HIST_FILE"
fi

# Check if roothistfile exists, create it if it doesn't
if [ ! -f "$ROOT_HIST_FILE" ]; then
    echo "Creating file: $ROOT_HIST_FILE"
    touch "$ROOT_HIST_FILE"
    # Set appropriate permissions (only owner can read/write)
    chmod 600 "$ROOT_HIST_FILE"
fi

echo "History Setup complete. The history directory and history files now exist"
# Check if container exists and is running
if ! docker ps -q -f name=$CONTAINER_NAME | grep -q .; then
    # If not running but exists, start it
    if docker ps -a -q -f name=$CONTAINER_NAME | grep -q .; then
        echo "Starting existing container: $CONTAINER_NAME"
        docker start $CONTAINER_NAME
    else
        # If it doesn't exist, build and start it
        # docker run          dev-base-image zsh
        echo "Creating new container: $CONTAINER_NAME"
        docker build -t ${CONTAINER_NAME}-image \
            --file $DOCKER_FILE \
            . &&
            docker run -d --name $CONTAINER_NAME \
                --hostname "$CONTAINER_NAME-docker" \
                -v $HOME/code/thomasbellio/lazyvim.config:/home/$USER_NAME/.config/thomas.nvim \
                -v $HOME/.local/share/thomas.nvim:/home/$USER_NAME/.local/share/thomas.nvim \
                -v $HOME/code/thomasbellio/lazyvim.config:/root/.config/thomas.nvim \
                -v $HOME/.local/share/thomas.nvim:/root/.local/share/thomas.nvim \
                -v $HOME/.config/thomas.nvim/language-profiles/csharp:/home/$USER_NAME/.config/thomas.nvim/lua/plugins/csharp \
                -v $HOME/.zprofile:/home/$USER_NAME/.zprofile \
                -v $HOME/.zprofile:/root/.zprofile \
                -v /var/run/docker.sock:/var/run/docker.sock \
                -v /tmp/.X11-unix:/tmp/.X11-unix \
                -v /tmp/tmux-$(id -u):/tmp/tmux-$(id -u) \
                -v ${PWD}/.docker/history/root/:/root/history \
                -v ${PWD}/.docker/history/user/:/home/$USER_NAME/history \
                -v /etc/localtime:/etc/localtime:ro \
                -v ${PWD}:/root/dotfiles \
                -v ${PWD}:/home/$USER_NAME/dotfiles \
                -v ${HOME}/.ssh:/root/.ssh \
                -v ${HOME}/.ssh:/home/$USER_NAME/.ssh \
                -v ${SSH_AUTH_SOCKET}:${SSH_AUTH_SOCKET} \
                -e TMUX_SOCKET=/tmp/tmux-$(id -u)/default \
                -e DISPLAY="$DISPLAY" \
                -e USER_NAME="$USER_NAME" \
                -e USER_UID="$USER_UID" \
                -e USER_GID="$USER_GID" \
                -v $(pwd):/home/$USER_NAME/code/$(basename $PWD) \
                ${CONTAINER_NAME}-image sleep infinity
    fi
fi
